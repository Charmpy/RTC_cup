
servo_2560.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d9e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000650  00800200  00800200  00000e12  2**0
                  ALLOC
  2 .stab         000006e4  00000000  00000000  00000e14  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000090  00000000  00000000  000014f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  00001588  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000238  00000000  00000000  000015a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008bc  00000000  00000000  000017e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000020d  00000000  00000000  0000209c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a05  00000000  00000000  000022a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000210  00000000  00000000  00002cb0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000030e  00000000  00000000  00002ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004ce  00000000  00000000  000031ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 00000058  00000000  00000000  0000369c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
   8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
   c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  10:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  14:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  18:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  1c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  20:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  24:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  28:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  2c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  30:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  34:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  38:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  3c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  40:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  44:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  48:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  4c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  50:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  54:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  58:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  5c:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <__vector_23>
  60:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  64:	0c 94 f6 04 	jmp	0x9ec	; 0x9ec <__vector_25>
  68:	0c 94 2c 05 	jmp	0xa58	; 0xa58 <__vector_26>
  6c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  70:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  74:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  78:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  7c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  80:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  84:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  88:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  8c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  90:	0c 94 3e 06 	jmp	0xc7c	; 0xc7c <__vector_36>
  94:	0c 94 70 05 	jmp	0xae0	; 0xae0 <__vector_37>
  98:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  9c:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  a8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  ac:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  b0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  b4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  b8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  bc:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  c0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  c4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  c8:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  cc:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  d0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  d4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>
  d8:	0c 94 f8 05 	jmp	0xbf0	; 0xbf0 <__vector_54>
  dc:	0c 94 b4 05 	jmp	0xb68	; 0xb68 <__vector_55>
  e0:	0c 94 86 00 	jmp	0x10c	; 0x10c <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	18 e0       	ldi	r17, 0x08	; 8
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	a0 35       	cpi	r26, 0x50	; 80
 100:	b1 07       	cpc	r27, r17
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	0e 94 ce 03 	call	0x79c	; 0x79c <main>
 108:	0c 94 cd 06 	jmp	0xd9a	; 0xd9a <_exit>

0000010c <__bad_interrupt>:
 10c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000110 <update_servo>:
}

void update_servo(servo_type *servo)
{
	//Mx_write(servo->ID,LED_ADDR,2,servo->led_en,servo->uart_number);
}
 110:	08 95       	ret

00000112 <USART_Init>:
#define FOSC 16000000// Clock Speed
#define BAUD 57600
#define MYUBRR FOSC/16/BAUD-1

void USART_Init( volatile unsigned char number, volatile unsigned long int boad)
{
 112:	df 93       	push	r29
 114:	cf 93       	push	r28
 116:	00 d0       	rcall	.+0      	; 0x118 <USART_Init+0x6>
 118:	0f 92       	push	r0
 11a:	0f 92       	push	r0
 11c:	cd b7       	in	r28, 0x3d	; 61
 11e:	de b7       	in	r29, 0x3e	; 62
 120:	89 83       	std	Y+1, r24	; 0x01
 122:	4a 83       	std	Y+2, r20	; 0x02
 124:	5b 83       	std	Y+3, r21	; 0x03
 126:	6c 83       	std	Y+4, r22	; 0x04
 128:	7d 83       	std	Y+5, r23	; 0x05
/* Set baud rate */
 unsigned int ubrr=FOSC/16/boad-1;
 12a:	2a 81       	ldd	r18, Y+2	; 0x02
 12c:	3b 81       	ldd	r19, Y+3	; 0x03
 12e:	4c 81       	ldd	r20, Y+4	; 0x04
 130:	5d 81       	ldd	r21, Y+5	; 0x05
 132:	60 e4       	ldi	r22, 0x40	; 64
 134:	72 e4       	ldi	r23, 0x42	; 66
 136:	8f e0       	ldi	r24, 0x0F	; 15
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	0e 94 ab 06 	call	0xd56	; 0xd56 <__udivmodsi4>
 13e:	21 50       	subi	r18, 0x01	; 1
 140:	30 40       	sbci	r19, 0x00	; 0
switch (number)
 142:	89 81       	ldd	r24, Y+1	; 0x01
 144:	81 30       	cpi	r24, 0x01	; 1
 146:	a1 f0       	breq	.+40     	; 0x170 <USART_Init+0x5e>
 148:	81 30       	cpi	r24, 0x01	; 1
 14a:	28 f0       	brcs	.+10     	; 0x156 <USART_Init+0x44>
 14c:	82 30       	cpi	r24, 0x02	; 2
 14e:	d9 f0       	breq	.+54     	; 0x186 <USART_Init+0x74>
 150:	83 30       	cpi	r24, 0x03	; 3
 152:	81 f5       	brne	.+96     	; 0x1b4 <USART_Init+0xa2>
 154:	23 c0       	rjmp	.+70     	; 0x19c <USART_Init+0x8a>
{
	case 0:
	
	UCSR0A = 0;
 156:	10 92 c0 00 	sts	0x00C0, r1
	UBRR0H = (unsigned char)(ubrr>>8);
 15a:	30 93 c5 00 	sts	0x00C5, r19
	UBRR0L = (unsigned char)ubrr;
 15e:	20 93 c4 00 	sts	0x00C4, r18
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0)|(1<<RXCIE0);
 162:	88 e9       	ldi	r24, 0x98	; 152
 164:	80 93 c1 00 	sts	0x00C1, r24
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (0<<USBS0)|(1<<UCSZ00)|(1<<UCSZ01);
 168:	86 e0       	ldi	r24, 0x06	; 6
 16a:	80 93 c2 00 	sts	0x00C2, r24
	break;
 16e:	22 c0       	rjmp	.+68     	; 0x1b4 <USART_Init+0xa2>
	case 1:
	UBRR1H = (unsigned char)(ubrr>>8);
 170:	30 93 cd 00 	sts	0x00CD, r19
	UBRR1L = (unsigned char)ubrr;
 174:	20 93 cc 00 	sts	0x00CC, r18
	/* Enable receiver and transmitter */
	UCSR1B = (0<<RXEN1)|(1<<TXEN1)|(1<<RXCIE1);
 178:	88 e8       	ldi	r24, 0x88	; 136
 17a:	80 93 c9 00 	sts	0x00C9, r24
	/* Set frame format: 8data, 2stop bit */
	UCSR1C = (0<<USBS1)|(3<<UCSZ10);
 17e:	86 e0       	ldi	r24, 0x06	; 6
 180:	80 93 ca 00 	sts	0x00CA, r24
	break;
 184:	17 c0       	rjmp	.+46     	; 0x1b4 <USART_Init+0xa2>
	case 2:
	UBRR2H = (unsigned char)(ubrr>>8);
 186:	30 93 d5 00 	sts	0x00D5, r19
	UBRR2L = (unsigned char)ubrr;
 18a:	20 93 d4 00 	sts	0x00D4, r18
	/* Enable receiver and transmitter */
	UCSR2B = (1<<TXEN2);//(1<<RXEN2)|
 18e:	88 e0       	ldi	r24, 0x08	; 8
 190:	80 93 d1 00 	sts	0x00D1, r24
	/* Set frame format: 8data, 2stop bit */
	UCSR2C = (1<<USBS2)|(3<<UCSZ20);
 194:	8e e0       	ldi	r24, 0x0E	; 14
 196:	80 93 d2 00 	sts	0x00D2, r24
	break;
 19a:	0c c0       	rjmp	.+24     	; 0x1b4 <USART_Init+0xa2>
	case 3:
UCSR3A = 0;
 19c:	10 92 30 01 	sts	0x0130, r1
	UBRR3H = (unsigned char)(ubrr>>8);
 1a0:	30 93 35 01 	sts	0x0135, r19
	UBRR3L = (unsigned char)ubrr;
 1a4:	20 93 34 01 	sts	0x0134, r18
	/* Enable receiver and transmitter */
	UCSR3B = (0<<RXEN3)|(1<<TXEN3)|(1<<RXCIE3);
 1a8:	88 e8       	ldi	r24, 0x88	; 136
 1aa:	80 93 31 01 	sts	0x0131, r24
	/* Set frame format: 8data, 2stop bit */
	UCSR3C = (0<<USBS3)|(1<<UCSZ30)|(1<<UCSZ31);
 1ae:	86 e0       	ldi	r24, 0x06	; 6
 1b0:	80 93 32 01 	sts	0x0132, r24
	break;
	default: break;
}


}
 1b4:	0f 90       	pop	r0
 1b6:	0f 90       	pop	r0
 1b8:	0f 90       	pop	r0
 1ba:	0f 90       	pop	r0
 1bc:	0f 90       	pop	r0
 1be:	cf 91       	pop	r28
 1c0:	df 91       	pop	r29
 1c2:	08 95       	ret

000001c4 <USART_Transmit>:

void USART_Transmit(unsigned char data, volatile unsigned char number)
{
 1c4:	df 93       	push	r29
 1c6:	cf 93       	push	r28
 1c8:	0f 92       	push	r0
 1ca:	cd b7       	in	r28, 0x3d	; 61
 1cc:	de b7       	in	r29, 0x3e	; 62
 1ce:	69 83       	std	Y+1, r22	; 0x01
	switch (number)
 1d0:	99 81       	ldd	r25, Y+1	; 0x01
 1d2:	91 30       	cpi	r25, 0x01	; 1
 1d4:	f1 f0       	breq	.+60     	; 0x212 <USART_Transmit+0x4e>
 1d6:	91 30       	cpi	r25, 0x01	; 1
 1d8:	30 f0       	brcs	.+12     	; 0x1e6 <USART_Transmit+0x22>
 1da:	92 30       	cpi	r25, 0x02	; 2
 1dc:	81 f1       	breq	.+96     	; 0x23e <USART_Transmit+0x7a>
 1de:	93 30       	cpi	r25, 0x03	; 3
 1e0:	09 f0       	breq	.+2      	; 0x1e4 <USART_Transmit+0x20>
 1e2:	4a c0       	rjmp	.+148    	; 0x278 <USART_Transmit+0xb4>
 1e4:	34 c0       	rjmp	.+104    	; 0x24e <USART_Transmit+0x8a>
	
	// 	/* Wait for empty transmit buffer */
// 	while ( !( UCSR3A & (1<<UDRE3)) );
// 	/* Put data into buffer, sends the data */
// 	UDR3= data;
	UART0.buf_out[UART0.max_count_out]=data;
 1e6:	e0 91 49 08 	lds	r30, 0x0849
 1ea:	f0 91 4a 08 	lds	r31, 0x084A
 1ee:	e5 5b       	subi	r30, 0xB5	; 181
 1f0:	f9 4f       	sbci	r31, 0xF9	; 249
 1f2:	80 83       	st	Z, r24
	UART0.max_count_out++;
 1f4:	80 91 49 08 	lds	r24, 0x0849
 1f8:	90 91 4a 08 	lds	r25, 0x084A
 1fc:	01 96       	adiw	r24, 0x01	; 1
 1fe:	90 93 4a 08 	sts	0x084A, r25
 202:	80 93 49 08 	sts	0x0849, r24
	UCSR0B|=(1<<UDRIE0);
 206:	e1 ec       	ldi	r30, 0xC1	; 193
 208:	f0 e0       	ldi	r31, 0x00	; 0
 20a:	80 81       	ld	r24, Z
 20c:	80 62       	ori	r24, 0x20	; 32
 20e:	80 83       	st	Z, r24
	break;
 210:	33 c0       	rjmp	.+102    	; 0x278 <USART_Transmit+0xb4>
	break;
	case 1:
	/* Wait for empty transmit buffer 	while ( !( UCSR1A & (1<<UDRE1)) );
	 Put data into buffer, sends the data 	UDR1= data;
	break;*/
	UART1.buf_out[UART1.max_count_out]=data;
 212:	e0 91 0f 04 	lds	r30, 0x040F
 216:	f0 91 10 04 	lds	r31, 0x0410
 21a:	ef 5e       	subi	r30, 0xEF	; 239
 21c:	fd 4f       	sbci	r31, 0xFD	; 253
 21e:	80 83       	st	Z, r24
	UART1.max_count_out++;
 220:	80 91 0f 04 	lds	r24, 0x040F
 224:	90 91 10 04 	lds	r25, 0x0410
 228:	01 96       	adiw	r24, 0x01	; 1
 22a:	90 93 10 04 	sts	0x0410, r25
 22e:	80 93 0f 04 	sts	0x040F, r24
	UCSR1B|=(1<<UDRIE1);
 232:	e9 ec       	ldi	r30, 0xC9	; 201
 234:	f0 e0       	ldi	r31, 0x00	; 0
 236:	80 81       	ld	r24, Z
 238:	80 62       	ori	r24, 0x20	; 32
 23a:	80 83       	st	Z, r24
	break;
 23c:	1d c0       	rjmp	.+58     	; 0x278 <USART_Transmit+0xb4>
	case 2:
	/* Wait for empty transmit buffer */
	while ( !( UCSR2A & (1<<UDRE2)) );
 23e:	e0 ed       	ldi	r30, 0xD0	; 208
 240:	f0 e0       	ldi	r31, 0x00	; 0
 242:	90 81       	ld	r25, Z
 244:	95 ff       	sbrs	r25, 5
 246:	fd cf       	rjmp	.-6      	; 0x242 <USART_Transmit+0x7e>
	/* Put data into buffer, sends the data */
	UDR2= data;
 248:	80 93 d6 00 	sts	0x00D6, r24
	break;
 24c:	15 c0       	rjmp	.+42     	; 0x278 <USART_Transmit+0xb4>
	case 3:
// 	/* Wait for empty transmit buffer */
// 	while ( !( UCSR3A & (1<<UDRE3)) );
// 	/* Put data into buffer, sends the data */
// 	UDR3= data;
	UART3.buf_out[UART3.max_count_out]=data;
 24e:	e0 91 2c 06 	lds	r30, 0x062C
 252:	f0 91 2d 06 	lds	r31, 0x062D
 256:	e2 5d       	subi	r30, 0xD2	; 210
 258:	fb 4f       	sbci	r31, 0xFB	; 251
 25a:	80 83       	st	Z, r24
	UART3.max_count_out++;
 25c:	80 91 2c 06 	lds	r24, 0x062C
 260:	90 91 2d 06 	lds	r25, 0x062D
 264:	01 96       	adiw	r24, 0x01	; 1
 266:	90 93 2d 06 	sts	0x062D, r25
 26a:	80 93 2c 06 	sts	0x062C, r24
	UCSR3B|=(1<<UDRIE3);
 26e:	e1 e3       	ldi	r30, 0x31	; 49
 270:	f1 e0       	ldi	r31, 0x01	; 1
 272:	80 81       	ld	r24, Z
 274:	80 62       	ori	r24, 0x20	; 32
 276:	80 83       	st	Z, r24
	break;
	default: break;
}
}
 278:	0f 90       	pop	r0
 27a:	cf 91       	pop	r28
 27c:	df 91       	pop	r29
 27e:	08 95       	ret

00000280 <Mx_write>:
void torque(volatile unsigned char ID, volatile unsigned char on)
{
	Mx_write(ID,24,1,on,UART_SERVO);
}
void Mx_write(volatile unsigned char ID, volatile unsigned char reg, volatile unsigned char size, volatile unsigned int data, volatile unsigned char n_uart)
{
 280:	0f 93       	push	r16
 282:	df 93       	push	r29
 284:	cf 93       	push	r28
 286:	00 d0       	rcall	.+0      	; 0x288 <Mx_write+0x8>
 288:	00 d0       	rcall	.+0      	; 0x28a <Mx_write+0xa>
 28a:	cd b7       	in	r28, 0x3d	; 61
 28c:	de b7       	in	r29, 0x3e	; 62
 28e:	89 83       	std	Y+1, r24	; 0x01
 290:	6a 83       	std	Y+2, r22	; 0x02
 292:	4b 83       	std	Y+3, r20	; 0x03
 294:	3d 83       	std	Y+5, r19	; 0x05
 296:	2c 83       	std	Y+4, r18	; 0x04
 298:	0e 83       	std	Y+6, r16	; 0x06
	UCSR3B&=~(1<<RXEN3);
 29a:	e1 e3       	ldi	r30, 0x31	; 49
 29c:	f1 e0       	ldi	r31, 0x01	; 1
 29e:	80 81       	ld	r24, Z
 2a0:	8f 7e       	andi	r24, 0xEF	; 239
 2a2:	80 83       	st	Z, r24
	UCSR3B|=(1<<TXEN3);
 2a4:	80 81       	ld	r24, Z
 2a6:	88 60       	ori	r24, 0x08	; 8
 2a8:	80 83       	st	Z, r24
	USART_Transmit(0xFF,n_uart);
 2aa:	6e 81       	ldd	r22, Y+6	; 0x06
 2ac:	8f ef       	ldi	r24, 0xFF	; 255
 2ae:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <USART_Transmit>
	USART_Transmit(0xFF,n_uart);
 2b2:	6e 81       	ldd	r22, Y+6	; 0x06
 2b4:	8f ef       	ldi	r24, 0xFF	; 255
 2b6:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <USART_Transmit>
	USART_Transmit(ID,n_uart);
 2ba:	89 81       	ldd	r24, Y+1	; 0x01
 2bc:	6e 81       	ldd	r22, Y+6	; 0x06
 2be:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <USART_Transmit>
	USART_Transmit(size+3,n_uart);
 2c2:	8b 81       	ldd	r24, Y+3	; 0x03
 2c4:	6e 81       	ldd	r22, Y+6	; 0x06
 2c6:	8d 5f       	subi	r24, 0xFD	; 253
 2c8:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <USART_Transmit>
	USART_Transmit(0x3,n_uart);
 2cc:	6e 81       	ldd	r22, Y+6	; 0x06
 2ce:	83 e0       	ldi	r24, 0x03	; 3
 2d0:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <USART_Transmit>
	USART_Transmit(reg,n_uart);
 2d4:	8a 81       	ldd	r24, Y+2	; 0x02
 2d6:	6e 81       	ldd	r22, Y+6	; 0x06
 2d8:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <USART_Transmit>
	USART_Transmit(data&0xFF,n_uart);
 2dc:	8c 81       	ldd	r24, Y+4	; 0x04
 2de:	9d 81       	ldd	r25, Y+5	; 0x05
 2e0:	6e 81       	ldd	r22, Y+6	; 0x06
 2e2:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <USART_Transmit>
	int checksum;
	if (size>1)
 2e6:	8b 81       	ldd	r24, Y+3	; 0x03
 2e8:	82 30       	cpi	r24, 0x02	; 2
 2ea:	d0 f0       	brcs	.+52     	; 0x320 <Mx_write+0xa0>
	{
		USART_Transmit((data&0xFF00)>>8,n_uart);
 2ec:	8c 81       	ldd	r24, Y+4	; 0x04
 2ee:	9d 81       	ldd	r25, Y+5	; 0x05
 2f0:	6e 81       	ldd	r22, Y+6	; 0x06
 2f2:	89 2f       	mov	r24, r25
 2f4:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <USART_Transmit>
		checksum = ~((ID + 5 + 3 + reg + (data&0xFF) + ((data&0xFF00)>>8)) % 256);
 2f8:	69 81       	ldd	r22, Y+1	; 0x01
 2fa:	8a 81       	ldd	r24, Y+2	; 0x02
 2fc:	4c 81       	ldd	r20, Y+4	; 0x04
 2fe:	5d 81       	ldd	r21, Y+5	; 0x05
 300:	2c 81       	ldd	r18, Y+4	; 0x04
 302:	3d 81       	ldd	r19, Y+5	; 0x05
 304:	23 2f       	mov	r18, r19
 306:	33 27       	eor	r19, r19
 308:	24 0f       	add	r18, r20
 30a:	31 1d       	adc	r19, r1
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	86 0f       	add	r24, r22
 310:	91 1d       	adc	r25, r1
 312:	08 96       	adiw	r24, 0x08	; 8
 314:	82 0f       	add	r24, r18
 316:	93 1f       	adc	r25, r19
 318:	90 70       	andi	r25, 0x00	; 0
 31a:	80 95       	com	r24
 31c:	90 95       	com	r25
 31e:	0d c0       	rjmp	.+26     	; 0x33a <Mx_write+0xba>
	}
	else
	{
		checksum = ~((ID + 4 + 0x3 + reg + (data&0xff)) % 256);
 320:	49 81       	ldd	r20, Y+1	; 0x01
 322:	8a 81       	ldd	r24, Y+2	; 0x02
 324:	2c 81       	ldd	r18, Y+4	; 0x04
 326:	3d 81       	ldd	r19, Y+5	; 0x05
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	84 0f       	add	r24, r20
 32c:	91 1d       	adc	r25, r1
 32e:	07 96       	adiw	r24, 0x07	; 7
 330:	82 0f       	add	r24, r18
 332:	91 1d       	adc	r25, r1
 334:	90 70       	andi	r25, 0x00	; 0
 336:	80 95       	com	r24
 338:	90 95       	com	r25
	}	
	USART_Transmit(checksum,n_uart);
 33a:	6e 81       	ldd	r22, Y+6	; 0x06
 33c:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <USART_Transmit>
	
	//UCSR3B|=(1<<RXCIE3);
}
 340:	26 96       	adiw	r28, 0x06	; 6
 342:	0f b6       	in	r0, 0x3f	; 63
 344:	f8 94       	cli
 346:	de bf       	out	0x3e, r29	; 62
 348:	0f be       	out	0x3f, r0	; 63
 34a:	cd bf       	out	0x3d, r28	; 61
 34c:	cf 91       	pop	r28
 34e:	df 91       	pop	r29
 350:	0f 91       	pop	r16
 352:	08 95       	ret

00000354 <USART_Receive>:

unsigned char USART_Receive(unsigned char number)
{
	
	switch (number)
 354:	81 30       	cpi	r24, 0x01	; 1
 356:	79 f0       	breq	.+30     	; 0x376 <USART_Receive+0x22>
 358:	81 30       	cpi	r24, 0x01	; 1
 35a:	28 f0       	brcs	.+10     	; 0x366 <USART_Receive+0x12>
 35c:	82 30       	cpi	r24, 0x02	; 2
 35e:	99 f0       	breq	.+38     	; 0x386 <USART_Receive+0x32>
 360:	83 30       	cpi	r24, 0x03	; 3
 362:	09 f5       	brne	.+66     	; 0x3a6 <USART_Receive+0x52>
 364:	18 c0       	rjmp	.+48     	; 0x396 <USART_Receive+0x42>
{
	case 0:
	/* Wait for data to be received */
	while ( !( UCSR0A& (1<<RXC0)) );
 366:	e0 ec       	ldi	r30, 0xC0	; 192
 368:	f0 e0       	ldi	r31, 0x00	; 0
 36a:	80 81       	ld	r24, Z
 36c:	88 23       	and	r24, r24
 36e:	ec f7       	brge	.-6      	; 0x36a <USART_Receive+0x16>
	/* Get and return received data from buffer */
	return UDR0;
 370:	80 91 c6 00 	lds	r24, 0x00C6
 374:	08 95       	ret
	break;
	case 1:
	/* Wait for data to be received */
	while ( !( UCSR1A& (1<<RXC1)) );
 376:	e8 ec       	ldi	r30, 0xC8	; 200
 378:	f0 e0       	ldi	r31, 0x00	; 0
 37a:	80 81       	ld	r24, Z
 37c:	88 23       	and	r24, r24
 37e:	ec f7       	brge	.-6      	; 0x37a <USART_Receive+0x26>
	/* Get and return received data from buffer */
	return UDR1;
 380:	80 91 ce 00 	lds	r24, 0x00CE
 384:	08 95       	ret
	break;
	case 2:
	/* Wait for data to be received */
	while ( !( UCSR2A& (1<<RXC2)) );
 386:	e0 ed       	ldi	r30, 0xD0	; 208
 388:	f0 e0       	ldi	r31, 0x00	; 0
 38a:	80 81       	ld	r24, Z
 38c:	88 23       	and	r24, r24
 38e:	ec f7       	brge	.-6      	; 0x38a <USART_Receive+0x36>
	/* Get and return received data from buffer */
	return UDR2;
 390:	80 91 d6 00 	lds	r24, 0x00D6
 394:	08 95       	ret
	break;
	case 3:
	/* Wait for data to be received */
	while ( !( UCSR3A& (1<<RXC3)) );
 396:	e0 e3       	ldi	r30, 0x30	; 48
 398:	f1 e0       	ldi	r31, 0x01	; 1
 39a:	80 81       	ld	r24, Z
 39c:	88 23       	and	r24, r24
 39e:	ec f7       	brge	.-6      	; 0x39a <USART_Receive+0x46>
	/* Get and return received data from buffer */
	return UDR3;
 3a0:	80 91 36 01 	lds	r24, 0x0136
 3a4:	08 95       	ret
	default: break;
}
	
	

}
 3a6:	08 95       	ret

000003a8 <UART_INIT_BUF>:


void UART_INIT_BUF(uart_type *uart)
{
	uart->count_in=0;
 3a8:	fc 01       	movw	r30, r24
 3aa:	e0 50       	subi	r30, 0x00	; 0
 3ac:	fe 4f       	sbci	r31, 0xFE	; 254
 3ae:	11 82       	std	Z+1, r1	; 0x01
 3b0:	10 82       	st	Z, r1
	uart->count_out=0;
 3b2:	fc 01       	movw	r30, r24
 3b4:	ee 5f       	subi	r30, 0xFE	; 254
 3b6:	fd 4f       	sbci	r31, 0xFD	; 253
 3b8:	11 82       	std	Z+1, r1	; 0x01
 3ba:	10 82       	st	Z, r1
	uart->max_count_out=0;
 3bc:	82 50       	subi	r24, 0x02	; 2
 3be:	9e 4f       	sbci	r25, 0xFE	; 254
 3c0:	fc 01       	movw	r30, r24
 3c2:	11 82       	std	Z+1, r1	; 0x01
 3c4:	10 82       	st	Z, r1
 3c6:	08 95       	ret

000003c8 <DEGREE_TO_TAIM>:
volatile unsigned int DEGREE_TO_TAIM(unsigned char deg)
{
	return(1050+200*deg/9);
 3c8:	98 ec       	ldi	r25, 0xC8	; 200
 3ca:	89 9f       	mul	r24, r25
 3cc:	c0 01       	movw	r24, r0
 3ce:	11 24       	eor	r1, r1
 3d0:	69 e0       	ldi	r22, 0x09	; 9
 3d2:	70 e0       	ldi	r23, 0x00	; 0
 3d4:	0e 94 98 06 	call	0xd30	; 0xd30 <__divmodhi4>
 3d8:	66 5e       	subi	r22, 0xE6	; 230
 3da:	7b 4f       	sbci	r23, 0xFB	; 251
}
 3dc:	86 2f       	mov	r24, r22
 3de:	97 2f       	mov	r25, r23
 3e0:	08 95       	ret

000003e2 <delay>:

void delay()
{
 3e2:	df 93       	push	r29
 3e4:	cf 93       	push	r28
 3e6:	0f 92       	push	r0
 3e8:	0f 92       	push	r0
 3ea:	cd b7       	in	r28, 0x3d	; 61
 3ec:	de b7       	in	r29, 0x3e	; 62
	volatile unsigned int i=0;
 3ee:	1a 82       	std	Y+2, r1	; 0x02
 3f0:	19 82       	std	Y+1, r1	; 0x01
	while (i<6000){i++;}
 3f2:	89 81       	ldd	r24, Y+1	; 0x01
 3f4:	9a 81       	ldd	r25, Y+2	; 0x02
 3f6:	27 e1       	ldi	r18, 0x17	; 23
 3f8:	80 37       	cpi	r24, 0x70	; 112
 3fa:	92 07       	cpc	r25, r18
 3fc:	58 f4       	brcc	.+22     	; 0x414 <delay+0x32>
 3fe:	89 81       	ldd	r24, Y+1	; 0x01
 400:	9a 81       	ldd	r25, Y+2	; 0x02
 402:	01 96       	adiw	r24, 0x01	; 1
 404:	9a 83       	std	Y+2, r25	; 0x02
 406:	89 83       	std	Y+1, r24	; 0x01
 408:	89 81       	ldd	r24, Y+1	; 0x01
 40a:	9a 81       	ldd	r25, Y+2	; 0x02
 40c:	27 e1       	ldi	r18, 0x17	; 23
 40e:	80 37       	cpi	r24, 0x70	; 112
 410:	92 07       	cpc	r25, r18
 412:	a8 f3       	brcs	.-22     	; 0x3fe <delay+0x1c>
}
 414:	0f 90       	pop	r0
 416:	0f 90       	pop	r0
 418:	cf 91       	pop	r28
 41a:	df 91       	pop	r29
 41c:	08 95       	ret

0000041e <wheel_mode>:
	UCSR3B|=(1<<TXEN3);
	UART3.flag=1;*/
}

void wheel_mode(volatile unsigned char ID)
{
 41e:	0f 93       	push	r16
 420:	df 93       	push	r29
 422:	cf 93       	push	r28
 424:	0f 92       	push	r0
 426:	cd b7       	in	r28, 0x3d	; 61
 428:	de b7       	in	r29, 0x3e	; 62
 42a:	89 83       	std	Y+1, r24	; 0x01
	Mx_write(ID,8,2,0,UART_SERVO);
 42c:	89 81       	ldd	r24, Y+1	; 0x01
 42e:	68 e0       	ldi	r22, 0x08	; 8
 430:	42 e0       	ldi	r20, 0x02	; 2
 432:	20 e0       	ldi	r18, 0x00	; 0
 434:	30 e0       	ldi	r19, 0x00	; 0
 436:	01 e0       	ldi	r16, 0x01	; 1
 438:	0e 94 40 01 	call	0x280	; 0x280 <Mx_write>
	delay();
 43c:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <delay>
	Mx_write(ID,6,2,0,UART_SERVO);
 440:	89 81       	ldd	r24, Y+1	; 0x01
 442:	66 e0       	ldi	r22, 0x06	; 6
 444:	42 e0       	ldi	r20, 0x02	; 2
 446:	20 e0       	ldi	r18, 0x00	; 0
 448:	30 e0       	ldi	r19, 0x00	; 0
 44a:	0e 94 40 01 	call	0x280	; 0x280 <Mx_write>
}
 44e:	0f 90       	pop	r0
 450:	cf 91       	pop	r28
 452:	df 91       	pop	r29
 454:	0f 91       	pop	r16
 456:	08 95       	ret

00000458 <set_position>:

#define ID_1 200
#define ID_2 100

void set_position(volatile unsigned char ID, volatile unsigned int position)//range 0-4095
{
 458:	0f 93       	push	r16
 45a:	1f 93       	push	r17
 45c:	df 93       	push	r29
 45e:	cf 93       	push	r28
 460:	00 d0       	rcall	.+0      	; 0x462 <set_position+0xa>
 462:	cd b7       	in	r28, 0x3d	; 61
 464:	de b7       	in	r29, 0x3e	; 62
 466:	89 83       	std	Y+1, r24	; 0x01
 468:	7b 83       	std	Y+3, r23	; 0x03
 46a:	6a 83       	std	Y+2, r22	; 0x02
//	join_mode(ID,4095);
//	delay();
	Mx_write(ID,30,2,position,UART_SERVO);
 46c:	89 81       	ldd	r24, Y+1	; 0x01
 46e:	2a 81       	ldd	r18, Y+2	; 0x02
 470:	3b 81       	ldd	r19, Y+3	; 0x03
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	6e e1       	ldi	r22, 0x1E	; 30
 476:	70 e0       	ldi	r23, 0x00	; 0
 478:	42 e0       	ldi	r20, 0x02	; 2
 47a:	50 e0       	ldi	r21, 0x00	; 0
 47c:	01 e0       	ldi	r16, 0x01	; 1
 47e:	10 e0       	ldi	r17, 0x00	; 0
 480:	0e 94 40 01 	call	0x280	; 0x280 <Mx_write>
//	delay();
}
 484:	0f 90       	pop	r0
 486:	0f 90       	pop	r0
 488:	0f 90       	pop	r0
 48a:	cf 91       	pop	r28
 48c:	df 91       	pop	r29
 48e:	1f 91       	pop	r17
 490:	0f 91       	pop	r16
 492:	08 95       	ret

00000494 <speed_run>:
void speed_run(volatile unsigned char ID, volatile unsigned int speed)
{
 494:	0f 93       	push	r16
 496:	1f 93       	push	r17
 498:	df 93       	push	r29
 49a:	cf 93       	push	r28
 49c:	00 d0       	rcall	.+0      	; 0x49e <speed_run+0xa>
 49e:	cd b7       	in	r28, 0x3d	; 61
 4a0:	de b7       	in	r29, 0x3e	; 62
 4a2:	89 83       	std	Y+1, r24	; 0x01
 4a4:	7b 83       	std	Y+3, r23	; 0x03
 4a6:	6a 83       	std	Y+2, r22	; 0x02
	wheel_mode(ID);
 4a8:	89 81       	ldd	r24, Y+1	; 0x01
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	0e 94 0f 02 	call	0x41e	; 0x41e <wheel_mode>
	delay();
 4b0:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <delay>
	Mx_write(ID,32,2,speed,UART_SERVO);
 4b4:	89 81       	ldd	r24, Y+1	; 0x01
 4b6:	2a 81       	ldd	r18, Y+2	; 0x02
 4b8:	3b 81       	ldd	r19, Y+3	; 0x03
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	60 e2       	ldi	r22, 0x20	; 32
 4be:	70 e0       	ldi	r23, 0x00	; 0
 4c0:	42 e0       	ldi	r20, 0x02	; 2
 4c2:	50 e0       	ldi	r21, 0x00	; 0
 4c4:	01 e0       	ldi	r16, 0x01	; 1
 4c6:	10 e0       	ldi	r17, 0x00	; 0
 4c8:	0e 94 40 01 	call	0x280	; 0x280 <Mx_write>
	delay();
 4cc:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <delay>
}
 4d0:	0f 90       	pop	r0
 4d2:	0f 90       	pop	r0
 4d4:	0f 90       	pop	r0
 4d6:	cf 91       	pop	r28
 4d8:	df 91       	pop	r29
 4da:	1f 91       	pop	r17
 4dc:	0f 91       	pop	r16
 4de:	08 95       	ret

000004e0 <led>:

void led(volatile unsigned char ID, volatile unsigned char on)
{
 4e0:	0f 93       	push	r16
 4e2:	1f 93       	push	r17
 4e4:	df 93       	push	r29
 4e6:	cf 93       	push	r28
 4e8:	0f 92       	push	r0
 4ea:	0f 92       	push	r0
 4ec:	cd b7       	in	r28, 0x3d	; 61
 4ee:	de b7       	in	r29, 0x3e	; 62
 4f0:	89 83       	std	Y+1, r24	; 0x01
 4f2:	6a 83       	std	Y+2, r22	; 0x02
	Mx_write(ID,0x19,1,on,UART_SERVO);
 4f4:	89 81       	ldd	r24, Y+1	; 0x01
 4f6:	2a 81       	ldd	r18, Y+2	; 0x02
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	69 e1       	ldi	r22, 0x19	; 25
 4fc:	70 e0       	ldi	r23, 0x00	; 0
 4fe:	41 e0       	ldi	r20, 0x01	; 1
 500:	50 e0       	ldi	r21, 0x00	; 0
 502:	30 e0       	ldi	r19, 0x00	; 0
 504:	01 e0       	ldi	r16, 0x01	; 1
 506:	10 e0       	ldi	r17, 0x00	; 0
 508:	0e 94 40 01 	call	0x280	; 0x280 <Mx_write>
}
 50c:	0f 90       	pop	r0
 50e:	0f 90       	pop	r0
 510:	cf 91       	pop	r28
 512:	df 91       	pop	r29
 514:	1f 91       	pop	r17
 516:	0f 91       	pop	r16
 518:	08 95       	ret

0000051a <torque>:

void torque(volatile unsigned char ID, volatile unsigned char on)
{
 51a:	0f 93       	push	r16
 51c:	1f 93       	push	r17
 51e:	df 93       	push	r29
 520:	cf 93       	push	r28
 522:	0f 92       	push	r0
 524:	0f 92       	push	r0
 526:	cd b7       	in	r28, 0x3d	; 61
 528:	de b7       	in	r29, 0x3e	; 62
 52a:	89 83       	std	Y+1, r24	; 0x01
 52c:	6a 83       	std	Y+2, r22	; 0x02
	Mx_write(ID,24,1,on,UART_SERVO);
 52e:	89 81       	ldd	r24, Y+1	; 0x01
 530:	2a 81       	ldd	r18, Y+2	; 0x02
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	68 e1       	ldi	r22, 0x18	; 24
 536:	70 e0       	ldi	r23, 0x00	; 0
 538:	41 e0       	ldi	r20, 0x01	; 1
 53a:	50 e0       	ldi	r21, 0x00	; 0
 53c:	30 e0       	ldi	r19, 0x00	; 0
 53e:	01 e0       	ldi	r16, 0x01	; 1
 540:	10 e0       	ldi	r17, 0x00	; 0
 542:	0e 94 40 01 	call	0x280	; 0x280 <Mx_write>
}
 546:	0f 90       	pop	r0
 548:	0f 90       	pop	r0
 54a:	cf 91       	pop	r28
 54c:	df 91       	pop	r29
 54e:	1f 91       	pop	r17
 550:	0f 91       	pop	r16
 552:	08 95       	ret

00000554 <MX_READ>:
	
	//UCSR3B|=(1<<RXCIE3);
}

void MX_READ(volatile unsigned char ID, volatile unsigned char reg_st, volatile unsigned char size, volatile unsigned char n_uart)
{
 554:	df 93       	push	r29
 556:	cf 93       	push	r28
 558:	00 d0       	rcall	.+0      	; 0x55a <MX_READ+0x6>
 55a:	0f 92       	push	r0
 55c:	cd b7       	in	r28, 0x3d	; 61
 55e:	de b7       	in	r29, 0x3e	; 62
 560:	89 83       	std	Y+1, r24	; 0x01
 562:	6a 83       	std	Y+2, r22	; 0x02
 564:	4b 83       	std	Y+3, r20	; 0x03
 566:	2c 83       	std	Y+4, r18	; 0x04
	//USART_Transmit(0x54,0);
	UCSR1B&=~(1<<RXEN1);
 568:	e9 ec       	ldi	r30, 0xC9	; 201
 56a:	f0 e0       	ldi	r31, 0x00	; 0
 56c:	80 81       	ld	r24, Z
 56e:	8f 7e       	andi	r24, 0xEF	; 239
 570:	80 83       	st	Z, r24
	UCSR1B|=(1<<TXEN1);
 572:	80 81       	ld	r24, Z
 574:	88 60       	ori	r24, 0x08	; 8
 576:	80 83       	st	Z, r24
	S1.NUMBER_BUF_SERVO=6+size;	
 578:	8b 81       	ldd	r24, Y+3	; 0x03
 57a:	8a 5f       	subi	r24, 0xFA	; 250
 57c:	80 93 2a 04 	sts	0x042A, r24
	USART_Transmit(0xFF,n_uart);
 580:	6c 81       	ldd	r22, Y+4	; 0x04
 582:	8f ef       	ldi	r24, 0xFF	; 255
 584:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <USART_Transmit>
	USART_Transmit(0xFF,n_uart);
 588:	6c 81       	ldd	r22, Y+4	; 0x04
 58a:	8f ef       	ldi	r24, 0xFF	; 255
 58c:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <USART_Transmit>
	USART_Transmit(ID,n_uart);
 590:	89 81       	ldd	r24, Y+1	; 0x01
 592:	6c 81       	ldd	r22, Y+4	; 0x04
 594:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <USART_Transmit>
	USART_Transmit(4,n_uart);
 598:	6c 81       	ldd	r22, Y+4	; 0x04
 59a:	84 e0       	ldi	r24, 0x04	; 4
 59c:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <USART_Transmit>
	USART_Transmit(2,n_uart);
 5a0:	6c 81       	ldd	r22, Y+4	; 0x04
 5a2:	82 e0       	ldi	r24, 0x02	; 2
 5a4:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <USART_Transmit>
	USART_Transmit(reg_st,n_uart);
 5a8:	8a 81       	ldd	r24, Y+2	; 0x02
 5aa:	6c 81       	ldd	r22, Y+4	; 0x04
 5ac:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <USART_Transmit>
	USART_Transmit(size,n_uart);
 5b0:	8b 81       	ldd	r24, Y+3	; 0x03
 5b2:	6c 81       	ldd	r22, Y+4	; 0x04
 5b4:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <USART_Transmit>
	int checksum;
	checksum = ~(ID + 4 + 2 + reg_st + size);
 5b8:	39 81       	ldd	r19, Y+1	; 0x01
 5ba:	8a 81       	ldd	r24, Y+2	; 0x02
 5bc:	2b 81       	ldd	r18, Y+3	; 0x03
	USART_Transmit(checksum,n_uart);
 5be:	6c 81       	ldd	r22, Y+4	; 0x04
	USART_Transmit(4,n_uart);
	USART_Transmit(2,n_uart);
	USART_Transmit(reg_st,n_uart);
	USART_Transmit(size,n_uart);
	int checksum;
	checksum = ~(ID + 4 + 2 + reg_st + size);
 5c0:	90 e0       	ldi	r25, 0x00	; 0
 5c2:	83 0f       	add	r24, r19
 5c4:	91 1d       	adc	r25, r1
 5c6:	06 96       	adiw	r24, 0x06	; 6
 5c8:	82 0f       	add	r24, r18
 5ca:	91 1d       	adc	r25, r1
	USART_Transmit(checksum,n_uart);
 5cc:	80 95       	com	r24
 5ce:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <USART_Transmit>
// 	USART_Transmit(0xFF,n_uart);
// 	USART_Transmit(ID,n_uart);
// 	USART_Transmit(3,n_uart);
/* while ((UCSR3B&(1<<TXC3))!=0){}*/
	
	while ((!( UCSR1A &(1<<TXC1)))|(UCSR1B&(1<<UDRIE1))){};
 5d2:	a8 ec       	ldi	r26, 0xC8	; 200
 5d4:	b0 e0       	ldi	r27, 0x00	; 0
 5d6:	e9 ec       	ldi	r30, 0xC9	; 201
 5d8:	f0 e0       	ldi	r31, 0x00	; 0
 5da:	41 e0       	ldi	r20, 0x01	; 1
 5dc:	50 e0       	ldi	r21, 0x00	; 0
 5de:	60 e0       	ldi	r22, 0x00	; 0
 5e0:	70 e0       	ldi	r23, 0x00	; 0
 5e2:	3c 91       	ld	r19, X
 5e4:	20 81       	ld	r18, Z
 5e6:	ca 01       	movw	r24, r20
 5e8:	36 fd       	sbrc	r19, 6
 5ea:	cb 01       	movw	r24, r22
 5ec:	30 e0       	ldi	r19, 0x00	; 0
 5ee:	20 72       	andi	r18, 0x20	; 32
 5f0:	30 70       	andi	r19, 0x00	; 0
 5f2:	82 2b       	or	r24, r18
 5f4:	93 2b       	or	r25, r19
 5f6:	00 97       	sbiw	r24, 0x00	; 0
 5f8:	a1 f7       	brne	.-24     	; 0x5e2 <MX_READ+0x8e>
	UCSR1B&=~(1<<TXEN1);
 5fa:	e9 ec       	ldi	r30, 0xC9	; 201
 5fc:	f0 e0       	ldi	r31, 0x00	; 0
 5fe:	80 81       	ld	r24, Z
 600:	87 7f       	andi	r24, 0xF7	; 247
 602:	80 83       	st	Z, r24
	//PORTJ|=(1<<PJ1)|(1<<PG0);
 	UCSR1B|=(1<<RXEN1);
 604:	80 81       	ld	r24, Z
 606:	80 61       	ori	r24, 0x10	; 16
 608:	80 83       	st	Z, r24
		UART3.buf_in[a]=USART_Receive(UART_SERVO);
	}		
	UCSR3B&=~(1<<RXEN3);
	UCSR3B|=(1<<TXEN3);
	UART3.flag=1;*/
}
 60a:	0f 90       	pop	r0
 60c:	0f 90       	pop	r0
 60e:	0f 90       	pop	r0
 610:	0f 90       	pop	r0
 612:	cf 91       	pop	r28
 614:	df 91       	pop	r29
 616:	08 95       	ret

00000618 <join_mode>:
	delay();
	Mx_write(ID,6,2,0,UART_SERVO);
}

void join_mode(volatile unsigned char ID, volatile unsigned int range)
{
 618:	0f 93       	push	r16
 61a:	df 93       	push	r29
 61c:	cf 93       	push	r28
 61e:	00 d0       	rcall	.+0      	; 0x620 <join_mode+0x8>
 620:	cd b7       	in	r28, 0x3d	; 61
 622:	de b7       	in	r29, 0x3e	; 62
 624:	89 83       	std	Y+1, r24	; 0x01
 626:	7b 83       	std	Y+3, r23	; 0x03
 628:	6a 83       	std	Y+2, r22	; 0x02
	Mx_write(ID,8,2,4095,UART_SERVO);
 62a:	89 81       	ldd	r24, Y+1	; 0x01
 62c:	68 e0       	ldi	r22, 0x08	; 8
 62e:	42 e0       	ldi	r20, 0x02	; 2
 630:	2f ef       	ldi	r18, 0xFF	; 255
 632:	3f e0       	ldi	r19, 0x0F	; 15
 634:	01 e0       	ldi	r16, 0x01	; 1
 636:	0e 94 40 01 	call	0x280	; 0x280 <Mx_write>
	//delay();
	Mx_write(ID,6,2,0,UART_SERVO);
 63a:	89 81       	ldd	r24, Y+1	; 0x01
 63c:	66 e0       	ldi	r22, 0x06	; 6
 63e:	42 e0       	ldi	r20, 0x02	; 2
 640:	20 e0       	ldi	r18, 0x00	; 0
 642:	30 e0       	ldi	r19, 0x00	; 0
 644:	0e 94 40 01 	call	0x280	; 0x280 <Mx_write>
}
 648:	0f 90       	pop	r0
 64a:	0f 90       	pop	r0
 64c:	0f 90       	pop	r0
 64e:	cf 91       	pop	r28
 650:	df 91       	pop	r29
 652:	0f 91       	pop	r16
 654:	08 95       	ret

00000656 <init_servo>:

void init_servo(servo_type *servo, char ID_S, char uart_number_s)
{
 656:	df 93       	push	r29
 658:	cf 93       	push	r28
 65a:	0f 92       	push	r0
 65c:	0f 92       	push	r0
 65e:	cd b7       	in	r28, 0x3d	; 61
 660:	de b7       	in	r29, 0x3e	; 62
 662:	9a 83       	std	Y+2, r25	; 0x02
 664:	89 83       	std	Y+1, r24	; 0x01
	servo->uart_number=uart_number_s;
 666:	fc 01       	movw	r30, r24
 668:	41 8b       	std	Z+17, r20	; 0x11
	servo->ID_TYPE=ID_S;
 66a:	60 83       	st	Z, r22
	servo->led_en=1;
 66c:	e9 81       	ldd	r30, Y+1	; 0x01
 66e:	fa 81       	ldd	r31, Y+2	; 0x02
 670:	81 e0       	ldi	r24, 0x01	; 1
 672:	80 8b       	std	Z+16, r24	; 0x10
	servo->CW=0;
 674:	15 82       	std	Z+5, r1	; 0x05
 676:	14 82       	std	Z+4, r1	; 0x04
	servo->CWW=0;
 678:	17 82       	std	Z+7, r1	; 0x07
 67a:	16 82       	std	Z+6, r1	; 0x06
	servo->speed=1023;
 67c:	8f ef       	ldi	r24, 0xFF	; 255
 67e:	93 e0       	ldi	r25, 0x03	; 3
 680:	92 83       	std	Z+2, r25	; 0x02
 682:	81 83       	std	Z+1, r24	; 0x01
	update_servo(&servo);
 684:	ce 01       	movw	r24, r28
 686:	01 96       	adiw	r24, 0x01	; 1
 688:	0e 94 88 00 	call	0x110	; 0x110 <update_servo>
}
 68c:	0f 90       	pop	r0
 68e:	0f 90       	pop	r0
 690:	cf 91       	pop	r28
 692:	df 91       	pop	r29
 694:	08 95       	ret

00000696 <spi_init>:
// #define CS_SET SPI_PORT&=(1<<CS)
// #define CS_RESET SPI_PORT|=(1<<CS)

void spi_init()
{
	SPI_PORT=(1<<CS);
 696:	80 e2       	ldi	r24, 0x20	; 32
 698:	85 b9       	out	0x05, r24	; 5
	SPI_DDR=(1<<PB0)|(1<<CS)|(1<<MOSI)|(1<<SCK);//|(0<<MISO);
 69a:	87 e2       	ldi	r24, 0x27	; 39
 69c:	84 b9       	out	0x04, r24	; 4
	SPI_PORT|=(1<<CS)|(1<<MOSI)|(1<<SCK);//|(1<<MISO);
 69e:	85 b1       	in	r24, 0x05	; 5
 6a0:	86 62       	ori	r24, 0x26	; 38
 6a2:	85 b9       	out	0x05, r24	; 5
	SPCR=(1<<SPE)|(1<<MSTR)|(1<<SPR0);//|(0<<CPOL)|(1<<CPHA);
 6a4:	81 e5       	ldi	r24, 0x51	; 81
 6a6:	8c bd       	out	0x2c, r24	; 44
}
 6a8:	08 95       	ret

000006aa <CS_SET>:

void CS_SET()
{
	SPI_PORT&=~(1<<CS);
 6aa:	2d 98       	cbi	0x05, 5	; 5
}
 6ac:	08 95       	ret

000006ae <CS_RESET>:
void CS_RESET()
{
	SPI_PORT|=(1<<CS);
 6ae:	2d 9a       	sbi	0x05, 5	; 5
}
 6b0:	08 95       	ret

000006b2 <SPI_Transmit>:

char SPI_Transmit(char cData)
{
	//SPI_PORT&=~(1<<CS);
/* Start transmission */
SPDR = cData;
 6b2:	8e bd       	out	0x2e, r24	; 46
//USART_Transmit(cData,0);
/* Wait for transmission complete */
while(!(SPSR&(1<<SPIF)))
 6b4:	0d b4       	in	r0, 0x2d	; 45
 6b6:	07 fe       	sbrs	r0, 7
 6b8:	fd cf       	rjmp	.-6      	; 0x6b4 <SPI_Transmit+0x2>
{
	//USART_Transmit(0x99,0);
}
return SPDR;
 6ba:	8e b5       	in	r24, 0x2e	; 46
}
 6bc:	08 95       	ret

000006be <SPI_Receive>:

char SPI_Receive(void)
{
/* Wait for reception complete */
while(!(SPSR & (1<<SPIF)));
 6be:	0d b4       	in	r0, 0x2d	; 45
 6c0:	07 fe       	sbrs	r0, 7
 6c2:	fd cf       	rjmp	.-6      	; 0x6be <SPI_Receive>
/* Return Data Register */
return SPDR;
 6c4:	8e b5       	in	r24, 0x2e	; 46
}
 6c6:	08 95       	ret

000006c8 <SpiWrite>:

void SpiWrite(char Adr, char Data)
{
 6c8:	0f 93       	push	r16
 6ca:	1f 93       	push	r17
 6cc:	08 2f       	mov	r16, r24
 6ce:	16 2f       	mov	r17, r22
	CS_SET();
 6d0:	0e 94 55 03 	call	0x6aa	; 0x6aa <CS_SET>
 	SPI_Transmit(Adr);
 6d4:	80 2f       	mov	r24, r16
 6d6:	0e 94 59 03 	call	0x6b2	; 0x6b2 <SPI_Transmit>
	SPI_Transmit(Data);
 6da:	81 2f       	mov	r24, r17
 6dc:	0e 94 59 03 	call	0x6b2	; 0x6b2 <SPI_Transmit>
	CS_RESET();
 6e0:	0e 94 57 03 	call	0x6ae	; 0x6ae <CS_RESET>
}
 6e4:	1f 91       	pop	r17
 6e6:	0f 91       	pop	r16
 6e8:	08 95       	ret

000006ea <SpiRead>:

char SpiRead(char Adr)
{
 6ea:	1f 93       	push	r17
 6ec:	18 2f       	mov	r17, r24
	CS_SET();
 6ee:	0e 94 55 03 	call	0x6aa	; 0x6aa <CS_SET>
 	SPI_Transmit(Adr|0b10000000);
 6f2:	81 2f       	mov	r24, r17
 6f4:	80 68       	ori	r24, 0x80	; 128
 6f6:	0e 94 59 03 	call	0x6b2	; 0x6b2 <SPI_Transmit>
	char data;
	data=SPI_Transmit(Adr+1);
 6fa:	81 2f       	mov	r24, r17
 6fc:	8f 5f       	subi	r24, 0xFF	; 255
 6fe:	0e 94 59 03 	call	0x6b2	; 0x6b2 <SPI_Transmit>
 702:	18 2f       	mov	r17, r24
	CS_RESET();
 704:	0e 94 57 03 	call	0x6ae	; 0x6ae <CS_RESET>
	return(data);
 708:	81 2f       	mov	r24, r17
 70a:	1f 91       	pop	r17
 70c:	08 95       	ret

0000070e <InitMPU9250>:
void InitMPU9250()
{
	CS_SET();
 70e:	0e 94 55 03 	call	0x6aa	; 0x6aa <CS_SET>
 	SPI_Transmit(106);
 712:	8a e6       	ldi	r24, 0x6A	; 106
 714:	0e 94 59 03 	call	0x6b2	; 0x6b2 <SPI_Transmit>
	SPI_Transmit(0b00010000);
 718:	80 e1       	ldi	r24, 0x10	; 16
 71a:	0e 94 59 03 	call	0x6b2	; 0x6b2 <SPI_Transmit>
	CS_RESET();
 71e:	0e 94 57 03 	call	0x6ae	; 0x6ae <CS_RESET>
	CS_SET();
 722:	0e 94 55 03 	call	0x6aa	; 0x6aa <CS_SET>
	SPI_Transmit(29);
 726:	8d e1       	ldi	r24, 0x1D	; 29
 728:	0e 94 59 03 	call	0x6b2	; 0x6b2 <SPI_Transmit>
	SPI_Transmit(6);
 72c:	86 e0       	ldi	r24, 0x06	; 6
 72e:	0e 94 59 03 	call	0x6b2	; 0x6b2 <SPI_Transmit>
	CS_RESET();
 732:	0e 94 57 03 	call	0x6ae	; 0x6ae <CS_RESET>
	CS_SET();
 736:	0e 94 55 03 	call	0x6aa	; 0x6aa <CS_SET>
	SPI_Transmit(26);
 73a:	8a e1       	ldi	r24, 0x1A	; 26
 73c:	0e 94 59 03 	call	0x6b2	; 0x6b2 <SPI_Transmit>
	SPI_Transmit(6);
 740:	86 e0       	ldi	r24, 0x06	; 6
 742:	0e 94 59 03 	call	0x6b2	; 0x6b2 <SPI_Transmit>
	CS_RESET();
 746:	0e 94 57 03 	call	0x6ae	; 0x6ae <CS_RESET>
	CS_SET();
 74a:	0e 94 55 03 	call	0x6aa	; 0x6aa <CS_SET>
	SPI_Transmit(27);
 74e:	8b e1       	ldi	r24, 0x1B	; 27
 750:	0e 94 59 03 	call	0x6b2	; 0x6b2 <SPI_Transmit>
	SPI_Transmit(0x18);
 754:	88 e1       	ldi	r24, 0x18	; 24
 756:	0e 94 59 03 	call	0x6b2	; 0x6b2 <SPI_Transmit>
	CS_RESET();
 75a:	0e 94 57 03 	call	0x6ae	; 0x6ae <CS_RESET>
	CS_SET();
 75e:	0e 94 55 03 	call	0x6aa	; 0x6aa <CS_SET>
	SPI_Transmit(28);
 762:	8c e1       	ldi	r24, 0x1C	; 28
 764:	0e 94 59 03 	call	0x6b2	; 0x6b2 <SPI_Transmit>
	SPI_Transmit(0x08);
 768:	88 e0       	ldi	r24, 0x08	; 8
 76a:	0e 94 59 03 	call	0x6b2	; 0x6b2 <SPI_Transmit>
	CS_RESET();
 76e:	0e 94 57 03 	call	0x6ae	; 0x6ae <CS_RESET>
	CS_SET();
 772:	0e 94 55 03 	call	0x6aa	; 0x6aa <CS_SET>
	SPI_Transmit(0x37);
 776:	87 e3       	ldi	r24, 0x37	; 55
 778:	0e 94 59 03 	call	0x6b2	; 0x6b2 <SPI_Transmit>
	SPI_Transmit(0x02);
 77c:	82 e0       	ldi	r24, 0x02	; 2
 77e:	0e 94 59 03 	call	0x6b2	; 0x6b2 <SPI_Transmit>
	CS_RESET();
 782:	0e 94 57 03 	call	0x6ae	; 0x6ae <CS_RESET>
	CS_SET();
 786:	0e 94 55 03 	call	0x6aa	; 0x6aa <CS_SET>
	SPI_Transmit(0x0A);
 78a:	8a e0       	ldi	r24, 0x0A	; 10
 78c:	0e 94 59 03 	call	0x6b2	; 0x6b2 <SPI_Transmit>
	SPI_Transmit(0x16);
 790:	86 e1       	ldi	r24, 0x16	; 22
 792:	0e 94 59 03 	call	0x6b2	; 0x6b2 <SPI_Transmit>
	CS_RESET();
 796:	0e 94 57 03 	call	0x6ae	; 0x6ae <CS_RESET>
 79a:	08 95       	ret

0000079c <main>:
	TCCR1B=(1<<WGM13)|(1<<WGM12)|(1<<CS11);
	TIMSK1=(1<<TOIE1)|(1<<OCIE1A);
	TCNT1=0;* /
	S1.angle_free=90;
	S1.midle_pos=2048;*/
    USART_Init(0,57600);
 79c:	80 e0       	ldi	r24, 0x00	; 0
 79e:	40 e0       	ldi	r20, 0x00	; 0
 7a0:	51 ee       	ldi	r21, 0xE1	; 225
 7a2:	60 e0       	ldi	r22, 0x00	; 0
 7a4:	70 e0       	ldi	r23, 0x00	; 0
 7a6:	0e 94 89 00 	call	0x112	; 0x112 <USART_Init>
	UART_INIT_BUF(&UART0);
 7aa:	8b e4       	ldi	r24, 0x4B	; 75
 7ac:	96 e0       	ldi	r25, 0x06	; 6
 7ae:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <UART_INIT_BUF>
	sei();
 7b2:	78 94       	sei
	USART_Transmit(0x11,0);
 7b4:	81 e1       	ldi	r24, 0x11	; 17
 7b6:	60 e0       	ldi	r22, 0x00	; 0
 7b8:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <USART_Transmit>
 	spi_init();
 7bc:	0e 94 4b 03 	call	0x696	; 0x696 <spi_init>
	InitMPU9250();
 7c0:	0e 94 87 03 	call	0x70e	; 0x70e <InitMPU9250>
// 	//CS_SET();
// // 	//SPI_Transmit(1);
// // 	SPI_Transmit(0x3B);
//  	USART_Transmit(SPI_Transmit(0x75|0b10000000),0);
// 	CS_RESET();
	USART_Transmit(SpiRead(0x3B),0);
 7c4:	8b e3       	ldi	r24, 0x3B	; 59
 7c6:	0e 94 75 03 	call	0x6ea	; 0x6ea <SpiRead>
 7ca:	60 e0       	ldi	r22, 0x00	; 0
 7cc:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <USART_Transmit>
// 				delay();
// 			}
// 	
    while(1)
		{
			USART_Transmit(SpiRead(0x3B),0);
 7d0:	8b e3       	ldi	r24, 0x3B	; 59
 7d2:	0e 94 75 03 	call	0x6ea	; 0x6ea <SpiRead>
 7d6:	60 e0       	ldi	r22, 0x00	; 0
 7d8:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <USART_Transmit>
			delay();
 7dc:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <delay>
 7e0:	f7 cf       	rjmp	.-18     	; 0x7d0 <main+0x34>

000007e2 <__vector_23>:
			count=0;
		}
	}*/

ISR(TIMER0_OVF_vect)
{
 7e2:	1f 92       	push	r1
 7e4:	0f 92       	push	r0
 7e6:	0f b6       	in	r0, 0x3f	; 63
 7e8:	0f 92       	push	r0
 7ea:	0b b6       	in	r0, 0x3b	; 59
 7ec:	0f 92       	push	r0
 7ee:	11 24       	eor	r1, r1
 7f0:	0f 93       	push	r16
 7f2:	1f 93       	push	r17
 7f4:	2f 93       	push	r18
 7f6:	3f 93       	push	r19
 7f8:	4f 93       	push	r20
 7fa:	5f 93       	push	r21
 7fc:	6f 93       	push	r22
 7fe:	7f 93       	push	r23
 800:	8f 93       	push	r24
 802:	9f 93       	push	r25
 804:	af 93       	push	r26
 806:	bf 93       	push	r27
 808:	ef 93       	push	r30
 80a:	ff 93       	push	r31
 80c:	df 93       	push	r29
 80e:	cf 93       	push	r28
 810:	0f 92       	push	r0
 812:	0f 92       	push	r0
 814:	cd b7       	in	r28, 0x3d	; 61
 816:	de b7       	in	r29, 0x3e	; 62
	if (((UART0.flag)&1!=0))
 818:	80 91 4f 08 	lds	r24, 0x084F
 81c:	80 ff       	sbrs	r24, 0
 81e:	77 c0       	rjmp	.+238    	; 0x90e <__vector_23+0x12c>
	{
		if (UART0.buf_in[0]=='A')
 820:	80 91 4a 07 	lds	r24, 0x074A
 824:	81 34       	cpi	r24, 0x41	; 65
 826:	c9 f5       	brne	.+114    	; 0x89a <__vector_23+0xb8>
		{
			set_position(ID_1,(UART0.buf_in[1]&0b11001111)*1000+(UART0.buf_in[2]&0b11001111)*100+(UART0.buf_in[2]&0b11001111)*10+(UART0.buf_in[4]&0b11001111));
 828:	40 91 4b 07 	lds	r20, 0x074B
 82c:	e0 91 4c 07 	lds	r30, 0x074C
 830:	80 91 4c 07 	lds	r24, 0x074C
 834:	90 91 4e 07 	lds	r25, 0x074E
 838:	50 e0       	ldi	r21, 0x00	; 0
 83a:	4f 7c       	andi	r20, 0xCF	; 207
 83c:	50 70       	andi	r21, 0x00	; 0
 83e:	28 ee       	ldi	r18, 0xE8	; 232
 840:	33 e0       	ldi	r19, 0x03	; 3
 842:	42 9f       	mul	r20, r18
 844:	b0 01       	movw	r22, r0
 846:	43 9f       	mul	r20, r19
 848:	70 0d       	add	r23, r0
 84a:	52 9f       	mul	r21, r18
 84c:	70 0d       	add	r23, r0
 84e:	11 24       	eor	r1, r1
 850:	f0 e0       	ldi	r31, 0x00	; 0
 852:	ef 7c       	andi	r30, 0xCF	; 207
 854:	f0 70       	andi	r31, 0x00	; 0
 856:	44 e6       	ldi	r20, 0x64	; 100
 858:	50 e0       	ldi	r21, 0x00	; 0
 85a:	e4 9f       	mul	r30, r20
 85c:	90 01       	movw	r18, r0
 85e:	e5 9f       	mul	r30, r21
 860:	30 0d       	add	r19, r0
 862:	f4 9f       	mul	r31, r20
 864:	30 0d       	add	r19, r0
 866:	11 24       	eor	r1, r1
 868:	62 0f       	add	r22, r18
 86a:	73 1f       	adc	r23, r19
 86c:	9f 7c       	andi	r25, 0xCF	; 207
 86e:	69 0f       	add	r22, r25
 870:	71 1d       	adc	r23, r1
 872:	90 e0       	ldi	r25, 0x00	; 0
 874:	8f 7c       	andi	r24, 0xCF	; 207
 876:	90 70       	andi	r25, 0x00	; 0
 878:	9c 01       	movw	r18, r24
 87a:	22 0f       	add	r18, r18
 87c:	33 1f       	adc	r19, r19
 87e:	88 0f       	add	r24, r24
 880:	99 1f       	adc	r25, r25
 882:	88 0f       	add	r24, r24
 884:	99 1f       	adc	r25, r25
 886:	88 0f       	add	r24, r24
 888:	99 1f       	adc	r25, r25
 88a:	82 0f       	add	r24, r18
 88c:	93 1f       	adc	r25, r19
 88e:	68 0f       	add	r22, r24
 890:	79 1f       	adc	r23, r25
 892:	88 ec       	ldi	r24, 0xC8	; 200
 894:	0e 94 2c 02 	call	0x458	; 0x458 <set_position>
 898:	38 c0       	rjmp	.+112    	; 0x90a <__vector_23+0x128>
		}
		else
		{
			set_position(ID_2,(UART0.buf_in[1]&0b11001111)*1000+(UART0.buf_in[2]&0b11001111)*100+(UART0.buf_in[2]&0b11001111)*10+(UART0.buf_in[4]&0b11001111));
 89a:	40 91 4b 07 	lds	r20, 0x074B
 89e:	e0 91 4c 07 	lds	r30, 0x074C
 8a2:	80 91 4c 07 	lds	r24, 0x074C
 8a6:	90 91 4e 07 	lds	r25, 0x074E
 8aa:	50 e0       	ldi	r21, 0x00	; 0
 8ac:	4f 7c       	andi	r20, 0xCF	; 207
 8ae:	50 70       	andi	r21, 0x00	; 0
 8b0:	28 ee       	ldi	r18, 0xE8	; 232
 8b2:	33 e0       	ldi	r19, 0x03	; 3
 8b4:	42 9f       	mul	r20, r18
 8b6:	b0 01       	movw	r22, r0
 8b8:	43 9f       	mul	r20, r19
 8ba:	70 0d       	add	r23, r0
 8bc:	52 9f       	mul	r21, r18
 8be:	70 0d       	add	r23, r0
 8c0:	11 24       	eor	r1, r1
 8c2:	f0 e0       	ldi	r31, 0x00	; 0
 8c4:	ef 7c       	andi	r30, 0xCF	; 207
 8c6:	f0 70       	andi	r31, 0x00	; 0
 8c8:	44 e6       	ldi	r20, 0x64	; 100
 8ca:	50 e0       	ldi	r21, 0x00	; 0
 8cc:	e4 9f       	mul	r30, r20
 8ce:	90 01       	movw	r18, r0
 8d0:	e5 9f       	mul	r30, r21
 8d2:	30 0d       	add	r19, r0
 8d4:	f4 9f       	mul	r31, r20
 8d6:	30 0d       	add	r19, r0
 8d8:	11 24       	eor	r1, r1
 8da:	62 0f       	add	r22, r18
 8dc:	73 1f       	adc	r23, r19
 8de:	9f 7c       	andi	r25, 0xCF	; 207
 8e0:	69 0f       	add	r22, r25
 8e2:	71 1d       	adc	r23, r1
 8e4:	90 e0       	ldi	r25, 0x00	; 0
 8e6:	8f 7c       	andi	r24, 0xCF	; 207
 8e8:	90 70       	andi	r25, 0x00	; 0
 8ea:	9c 01       	movw	r18, r24
 8ec:	22 0f       	add	r18, r18
 8ee:	33 1f       	adc	r19, r19
 8f0:	88 0f       	add	r24, r24
 8f2:	99 1f       	adc	r25, r25
 8f4:	88 0f       	add	r24, r24
 8f6:	99 1f       	adc	r25, r25
 8f8:	88 0f       	add	r24, r24
 8fa:	99 1f       	adc	r25, r25
 8fc:	82 0f       	add	r24, r18
 8fe:	93 1f       	adc	r25, r19
 900:	68 0f       	add	r22, r24
 902:	79 1f       	adc	r23, r25
 904:	84 e6       	ldi	r24, 0x64	; 100
 906:	0e 94 2c 02 	call	0x458	; 0x458 <set_position>
		}
		//S1.midle_pos=(UART0.buf_in[0]&0b11001111)*1000+(UART0.buf_in[1]&0b11001111)*100+(UART0.buf_in[2]&0b11001111)*10+(UART0.buf_in[3]&0b11001111);
		/*USART_Transmit(0x45,0);
		USART_Transmit(0x02,0);
		USART_Transmit(0x74,0);*/
		UART0.flag=0;
 90a:	10 92 4f 08 	sts	0x084F, r1
	}
	
	
	
	if (((UART1.flag)!=0))
 90e:	80 91 15 04 	lds	r24, 0x0415
 912:	88 23       	and	r24, r24
 914:	09 f4       	brne	.+2      	; 0x918 <__vector_23+0x136>
 916:	51 c0       	rjmp	.+162    	; 0x9ba <__vector_23+0x1d8>
// 		USART_Transmit((data%10)+0x30,0);
// 		USART_Transmit(13,0);
// 		}
// 		USART_Transmit(13,0);
		volatile unsigned int data;
		data=(UART1.buf_in[8]<<8);
 918:	20 91 18 03 	lds	r18, 0x0318
 91c:	92 2f       	mov	r25, r18
 91e:	80 e0       	ldi	r24, 0x00	; 0
 920:	9a 83       	std	Y+2, r25	; 0x02
 922:	89 83       	std	Y+1, r24	; 0x01
		data=data+UART1.buf_in[7];
 924:	20 91 17 03 	lds	r18, 0x0317
 928:	89 81       	ldd	r24, Y+1	; 0x01
 92a:	9a 81       	ldd	r25, Y+2	; 0x02
 92c:	82 0f       	add	r24, r18
 92e:	91 1d       	adc	r25, r1
 930:	9a 83       	std	Y+2, r25	; 0x02
 932:	89 83       	std	Y+1, r24	; 0x01
		S1.present_pos=data;	
 934:	89 81       	ldd	r24, Y+1	; 0x01
 936:	9a 81       	ldd	r25, Y+2	; 0x02
 938:	90 93 23 04 	sts	0x0423, r25
 93c:	80 93 22 04 	sts	0x0422, r24
		USART_Transmit(((data%10000)/1000)+0x30,0);
 940:	89 81       	ldd	r24, Y+1	; 0x01
 942:	9a 81       	ldd	r25, Y+2	; 0x02
 944:	60 e1       	ldi	r22, 0x10	; 16
 946:	77 e2       	ldi	r23, 0x27	; 39
 948:	0e 94 84 06 	call	0xd08	; 0xd08 <__udivmodhi4>
 94c:	08 ee       	ldi	r16, 0xE8	; 232
 94e:	13 e0       	ldi	r17, 0x03	; 3
 950:	b8 01       	movw	r22, r16
 952:	0e 94 84 06 	call	0xd08	; 0xd08 <__udivmodhi4>
 956:	86 2f       	mov	r24, r22
 958:	80 5d       	subi	r24, 0xD0	; 208
 95a:	60 e0       	ldi	r22, 0x00	; 0
 95c:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <USART_Transmit>
		USART_Transmit(((data%1000)/100)+0x30,0);
 960:	89 81       	ldd	r24, Y+1	; 0x01
 962:	9a 81       	ldd	r25, Y+2	; 0x02
 964:	b8 01       	movw	r22, r16
 966:	0e 94 84 06 	call	0xd08	; 0xd08 <__udivmodhi4>
 96a:	04 e6       	ldi	r16, 0x64	; 100
 96c:	10 e0       	ldi	r17, 0x00	; 0
 96e:	b8 01       	movw	r22, r16
 970:	0e 94 84 06 	call	0xd08	; 0xd08 <__udivmodhi4>
 974:	86 2f       	mov	r24, r22
 976:	80 5d       	subi	r24, 0xD0	; 208
 978:	60 e0       	ldi	r22, 0x00	; 0
 97a:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <USART_Transmit>
		USART_Transmit(((data%100)/10)+0x30,0);
 97e:	89 81       	ldd	r24, Y+1	; 0x01
 980:	9a 81       	ldd	r25, Y+2	; 0x02
 982:	b8 01       	movw	r22, r16
 984:	0e 94 84 06 	call	0xd08	; 0xd08 <__udivmodhi4>
 988:	0a e0       	ldi	r16, 0x0A	; 10
 98a:	10 e0       	ldi	r17, 0x00	; 0
 98c:	b8 01       	movw	r22, r16
 98e:	0e 94 84 06 	call	0xd08	; 0xd08 <__udivmodhi4>
 992:	86 2f       	mov	r24, r22
 994:	80 5d       	subi	r24, 0xD0	; 208
 996:	60 e0       	ldi	r22, 0x00	; 0
 998:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <USART_Transmit>
		USART_Transmit((data%10)+0x30,0);
 99c:	89 81       	ldd	r24, Y+1	; 0x01
 99e:	9a 81       	ldd	r25, Y+2	; 0x02
 9a0:	b8 01       	movw	r22, r16
 9a2:	0e 94 84 06 	call	0xd08	; 0xd08 <__udivmodhi4>
 9a6:	80 5d       	subi	r24, 0xD0	; 208
 9a8:	60 e0       	ldi	r22, 0x00	; 0
 9aa:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <USART_Transmit>
		USART_Transmit(13,0);
 9ae:	8d e0       	ldi	r24, 0x0D	; 13
 9b0:	60 e0       	ldi	r22, 0x00	; 0
 9b2:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <USART_Transmit>
		UART1.flag=0;
 9b6:	10 92 15 04 	sts	0x0415, r1
	}
}
 9ba:	0f 90       	pop	r0
 9bc:	0f 90       	pop	r0
 9be:	cf 91       	pop	r28
 9c0:	df 91       	pop	r29
 9c2:	ff 91       	pop	r31
 9c4:	ef 91       	pop	r30
 9c6:	bf 91       	pop	r27
 9c8:	af 91       	pop	r26
 9ca:	9f 91       	pop	r25
 9cc:	8f 91       	pop	r24
 9ce:	7f 91       	pop	r23
 9d0:	6f 91       	pop	r22
 9d2:	5f 91       	pop	r21
 9d4:	4f 91       	pop	r20
 9d6:	3f 91       	pop	r19
 9d8:	2f 91       	pop	r18
 9da:	1f 91       	pop	r17
 9dc:	0f 91       	pop	r16
 9de:	0f 90       	pop	r0
 9e0:	0b be       	out	0x3b, r0	; 59
 9e2:	0f 90       	pop	r0
 9e4:	0f be       	out	0x3f, r0	; 63
 9e6:	0f 90       	pop	r0
 9e8:	1f 90       	pop	r1
 9ea:	18 95       	reti

000009ec <__vector_25>:
ISR(USART0_RX_vect)	
{
 9ec:	1f 92       	push	r1
 9ee:	0f 92       	push	r0
 9f0:	0f b6       	in	r0, 0x3f	; 63
 9f2:	0f 92       	push	r0
 9f4:	0b b6       	in	r0, 0x3b	; 59
 9f6:	0f 92       	push	r0
 9f8:	11 24       	eor	r1, r1
 9fa:	8f 93       	push	r24
 9fc:	9f 93       	push	r25
 9fe:	ef 93       	push	r30
 a00:	ff 93       	push	r31
	UART0.buf_in[UART0.count_in]=UDR0;
 a02:	e0 91 4b 08 	lds	r30, 0x084B
 a06:	f0 91 4c 08 	lds	r31, 0x084C
 a0a:	80 91 c6 00 	lds	r24, 0x00C6
 a0e:	e6 5b       	subi	r30, 0xB6	; 182
 a10:	f8 4f       	sbci	r31, 0xF8	; 248
 a12:	80 83       	st	Z, r24
	UART0.count_in++;
 a14:	80 91 4b 08 	lds	r24, 0x084B
 a18:	90 91 4c 08 	lds	r25, 0x084C
 a1c:	01 96       	adiw	r24, 0x01	; 1
 a1e:	90 93 4c 08 	sts	0x084C, r25
 a22:	80 93 4b 08 	sts	0x084B, r24
	if (UART0.count_in>=NUMBER_BUF)
 a26:	80 91 4b 08 	lds	r24, 0x084B
 a2a:	90 91 4c 08 	lds	r25, 0x084C
 a2e:	85 30       	cpi	r24, 0x05	; 5
 a30:	91 05       	cpc	r25, r1
 a32:	38 f0       	brcs	.+14     	; 0xa42 <__vector_25+0x56>
	{
		UART0.count_in=0;
 a34:	10 92 4c 08 	sts	0x084C, r1
 a38:	10 92 4b 08 	sts	0x084B, r1
		UART0.flag=1;
 a3c:	81 e0       	ldi	r24, 0x01	; 1
 a3e:	80 93 4f 08 	sts	0x084F, r24
			torque(ID_1,0);
			break;
	}
	MX_READ(ID_1,Present_Voltage,1,UART_SERVO);
	UCSR0B|=(1<<RXCIE0);*/
}
 a42:	ff 91       	pop	r31
 a44:	ef 91       	pop	r30
 a46:	9f 91       	pop	r25
 a48:	8f 91       	pop	r24
 a4a:	0f 90       	pop	r0
 a4c:	0b be       	out	0x3b, r0	; 59
 a4e:	0f 90       	pop	r0
 a50:	0f be       	out	0x3f, r0	; 63
 a52:	0f 90       	pop	r0
 a54:	1f 90       	pop	r1
 a56:	18 95       	reti

00000a58 <__vector_26>:

ISR (USART0_UDRE_vect)
{
 a58:	1f 92       	push	r1
 a5a:	0f 92       	push	r0
 a5c:	0f b6       	in	r0, 0x3f	; 63
 a5e:	0f 92       	push	r0
 a60:	0b b6       	in	r0, 0x3b	; 59
 a62:	0f 92       	push	r0
 a64:	11 24       	eor	r1, r1
 a66:	2f 93       	push	r18
 a68:	3f 93       	push	r19
 a6a:	8f 93       	push	r24
 a6c:	9f 93       	push	r25
 a6e:	ef 93       	push	r30
 a70:	ff 93       	push	r31

	UDR0=UART0.buf_out[UART0.count_out];
 a72:	e0 91 4d 08 	lds	r30, 0x084D
 a76:	f0 91 4e 08 	lds	r31, 0x084E
 a7a:	e5 5b       	subi	r30, 0xB5	; 181
 a7c:	f9 4f       	sbci	r31, 0xF9	; 249
 a7e:	80 81       	ld	r24, Z
 a80:	80 93 c6 00 	sts	0x00C6, r24
	UART0.count_out++;//=UART3.count_out-1;
 a84:	80 91 4d 08 	lds	r24, 0x084D
 a88:	90 91 4e 08 	lds	r25, 0x084E
 a8c:	01 96       	adiw	r24, 0x01	; 1
 a8e:	90 93 4e 08 	sts	0x084E, r25
 a92:	80 93 4d 08 	sts	0x084D, r24
	if ((UART0.count_out)>=(UART0.max_count_out))
 a96:	20 91 4d 08 	lds	r18, 0x084D
 a9a:	30 91 4e 08 	lds	r19, 0x084E
 a9e:	80 91 49 08 	lds	r24, 0x0849
 aa2:	90 91 4a 08 	lds	r25, 0x084A
 aa6:	28 17       	cp	r18, r24
 aa8:	39 07       	cpc	r19, r25
 aaa:	68 f0       	brcs	.+26     	; 0xac6 <__vector_26+0x6e>
	{
		UCSR0B&=~(1<<UDRIE0);
 aac:	e1 ec       	ldi	r30, 0xC1	; 193
 aae:	f0 e0       	ldi	r31, 0x00	; 0
 ab0:	80 81       	ld	r24, Z
 ab2:	8f 7d       	andi	r24, 0xDF	; 223
 ab4:	80 83       	st	Z, r24
		UART0.max_count_out=0;
 ab6:	10 92 4a 08 	sts	0x084A, r1
 aba:	10 92 49 08 	sts	0x0849, r1
		UART0.count_out=0;
 abe:	10 92 4e 08 	sts	0x084E, r1
 ac2:	10 92 4d 08 	sts	0x084D, r1
		
	}
}
 ac6:	ff 91       	pop	r31
 ac8:	ef 91       	pop	r30
 aca:	9f 91       	pop	r25
 acc:	8f 91       	pop	r24
 ace:	3f 91       	pop	r19
 ad0:	2f 91       	pop	r18
 ad2:	0f 90       	pop	r0
 ad4:	0b be       	out	0x3b, r0	; 59
 ad6:	0f 90       	pop	r0
 ad8:	0f be       	out	0x3f, r0	; 63
 ada:	0f 90       	pop	r0
 adc:	1f 90       	pop	r1
 ade:	18 95       	reti

00000ae0 <__vector_37>:

ISR (USART1_UDRE_vect)
{
 ae0:	1f 92       	push	r1
 ae2:	0f 92       	push	r0
 ae4:	0f b6       	in	r0, 0x3f	; 63
 ae6:	0f 92       	push	r0
 ae8:	0b b6       	in	r0, 0x3b	; 59
 aea:	0f 92       	push	r0
 aec:	11 24       	eor	r1, r1
 aee:	2f 93       	push	r18
 af0:	3f 93       	push	r19
 af2:	8f 93       	push	r24
 af4:	9f 93       	push	r25
 af6:	ef 93       	push	r30
 af8:	ff 93       	push	r31

	UDR1=UART1.buf_out[UART1.count_out];
 afa:	e0 91 13 04 	lds	r30, 0x0413
 afe:	f0 91 14 04 	lds	r31, 0x0414
 b02:	ef 5e       	subi	r30, 0xEF	; 239
 b04:	fd 4f       	sbci	r31, 0xFD	; 253
 b06:	80 81       	ld	r24, Z
 b08:	80 93 ce 00 	sts	0x00CE, r24
	UART1.count_out++;//=UART3.count_out-1;
 b0c:	80 91 13 04 	lds	r24, 0x0413
 b10:	90 91 14 04 	lds	r25, 0x0414
 b14:	01 96       	adiw	r24, 0x01	; 1
 b16:	90 93 14 04 	sts	0x0414, r25
 b1a:	80 93 13 04 	sts	0x0413, r24
	if ((UART1.count_out)>=(UART1.max_count_out))
 b1e:	20 91 13 04 	lds	r18, 0x0413
 b22:	30 91 14 04 	lds	r19, 0x0414
 b26:	80 91 0f 04 	lds	r24, 0x040F
 b2a:	90 91 10 04 	lds	r25, 0x0410
 b2e:	28 17       	cp	r18, r24
 b30:	39 07       	cpc	r19, r25
 b32:	68 f0       	brcs	.+26     	; 0xb4e <__vector_37+0x6e>
	{
		UCSR1B&=~(1<<UDRIE1);
 b34:	e9 ec       	ldi	r30, 0xC9	; 201
 b36:	f0 e0       	ldi	r31, 0x00	; 0
 b38:	80 81       	ld	r24, Z
 b3a:	8f 7d       	andi	r24, 0xDF	; 223
 b3c:	80 83       	st	Z, r24
		UART1.max_count_out=0;
 b3e:	10 92 10 04 	sts	0x0410, r1
 b42:	10 92 0f 04 	sts	0x040F, r1
		UART1.count_out=0;
 b46:	10 92 14 04 	sts	0x0414, r1
 b4a:	10 92 13 04 	sts	0x0413, r1
		
	}
}
 b4e:	ff 91       	pop	r31
 b50:	ef 91       	pop	r30
 b52:	9f 91       	pop	r25
 b54:	8f 91       	pop	r24
 b56:	3f 91       	pop	r19
 b58:	2f 91       	pop	r18
 b5a:	0f 90       	pop	r0
 b5c:	0b be       	out	0x3b, r0	; 59
 b5e:	0f 90       	pop	r0
 b60:	0f be       	out	0x3f, r0	; 63
 b62:	0f 90       	pop	r0
 b64:	1f 90       	pop	r1
 b66:	18 95       	reti

00000b68 <__vector_55>:


ISR (USART3_UDRE_vect)
{
 b68:	1f 92       	push	r1
 b6a:	0f 92       	push	r0
 b6c:	0f b6       	in	r0, 0x3f	; 63
 b6e:	0f 92       	push	r0
 b70:	0b b6       	in	r0, 0x3b	; 59
 b72:	0f 92       	push	r0
 b74:	11 24       	eor	r1, r1
 b76:	2f 93       	push	r18
 b78:	3f 93       	push	r19
 b7a:	8f 93       	push	r24
 b7c:	9f 93       	push	r25
 b7e:	ef 93       	push	r30
 b80:	ff 93       	push	r31
	UDR3=UART3.buf_out[UART3.count_out];
 b82:	e0 91 30 06 	lds	r30, 0x0630
 b86:	f0 91 31 06 	lds	r31, 0x0631
 b8a:	e2 5d       	subi	r30, 0xD2	; 210
 b8c:	fb 4f       	sbci	r31, 0xFB	; 251
 b8e:	80 81       	ld	r24, Z
 b90:	80 93 36 01 	sts	0x0136, r24
	UART3.count_out++;//=UART3.count_out-1;
 b94:	80 91 30 06 	lds	r24, 0x0630
 b98:	90 91 31 06 	lds	r25, 0x0631
 b9c:	01 96       	adiw	r24, 0x01	; 1
 b9e:	90 93 31 06 	sts	0x0631, r25
 ba2:	80 93 30 06 	sts	0x0630, r24
	if ((UART3.count_out)>=(UART3.max_count_out))
 ba6:	20 91 30 06 	lds	r18, 0x0630
 baa:	30 91 31 06 	lds	r19, 0x0631
 bae:	80 91 2c 06 	lds	r24, 0x062C
 bb2:	90 91 2d 06 	lds	r25, 0x062D
 bb6:	28 17       	cp	r18, r24
 bb8:	39 07       	cpc	r19, r25
 bba:	68 f0       	brcs	.+26     	; 0xbd6 <__vector_55+0x6e>
	{
		UCSR3B&=~(1<<UDRIE3);
 bbc:	e1 e3       	ldi	r30, 0x31	; 49
 bbe:	f1 e0       	ldi	r31, 0x01	; 1
 bc0:	80 81       	ld	r24, Z
 bc2:	8f 7d       	andi	r24, 0xDF	; 223
 bc4:	80 83       	st	Z, r24
		UART3.max_count_out=0;
 bc6:	10 92 2d 06 	sts	0x062D, r1
 bca:	10 92 2c 06 	sts	0x062C, r1
		UART3.count_out=0;
 bce:	10 92 31 06 	sts	0x0631, r1
 bd2:	10 92 30 06 	sts	0x0630, r1
	}
}
 bd6:	ff 91       	pop	r31
 bd8:	ef 91       	pop	r30
 bda:	9f 91       	pop	r25
 bdc:	8f 91       	pop	r24
 bde:	3f 91       	pop	r19
 be0:	2f 91       	pop	r18
 be2:	0f 90       	pop	r0
 be4:	0b be       	out	0x3b, r0	; 59
 be6:	0f 90       	pop	r0
 be8:	0f be       	out	0x3f, r0	; 63
 bea:	0f 90       	pop	r0
 bec:	1f 90       	pop	r1
 bee:	18 95       	reti

00000bf0 <__vector_54>:



ISR (USART3_RX_vect)
{
 bf0:	1f 92       	push	r1
 bf2:	0f 92       	push	r0
 bf4:	0f b6       	in	r0, 0x3f	; 63
 bf6:	0f 92       	push	r0
 bf8:	0b b6       	in	r0, 0x3b	; 59
 bfa:	0f 92       	push	r0
 bfc:	11 24       	eor	r1, r1
 bfe:	2f 93       	push	r18
 c00:	3f 93       	push	r19
 c02:	8f 93       	push	r24
 c04:	9f 93       	push	r25
 c06:	ef 93       	push	r30
 c08:	ff 93       	push	r31
	//UCSR3A&=~(1<<RXC3);
	UART3.buf_in[UART3.count_in]=UDR3;
 c0a:	e0 91 2e 06 	lds	r30, 0x062E
 c0e:	f0 91 2f 06 	lds	r31, 0x062F
 c12:	80 91 36 01 	lds	r24, 0x0136
 c16:	e3 5d       	subi	r30, 0xD3	; 211
 c18:	fa 4f       	sbci	r31, 0xFA	; 250
 c1a:	80 83       	st	Z, r24
	UART3.count_in++;
 c1c:	80 91 2e 06 	lds	r24, 0x062E
 c20:	90 91 2f 06 	lds	r25, 0x062F
 c24:	01 96       	adiw	r24, 0x01	; 1
 c26:	90 93 2f 06 	sts	0x062F, r25
 c2a:	80 93 2e 06 	sts	0x062E, r24
	if (UART3.count_in>S1.NUMBER_BUF_SERVO+2)
 c2e:	20 91 2e 06 	lds	r18, 0x062E
 c32:	30 91 2f 06 	lds	r19, 0x062F
 c36:	80 91 2a 04 	lds	r24, 0x042A
 c3a:	90 e0       	ldi	r25, 0x00	; 0
 c3c:	02 96       	adiw	r24, 0x02	; 2
 c3e:	82 17       	cp	r24, r18
 c40:	93 07       	cpc	r25, r19
 c42:	78 f4       	brcc	.+30     	; 0xc62 <__vector_54+0x72>
	{
		UART3.count_in=0;
 c44:	10 92 2f 06 	sts	0x062F, r1
 c48:	10 92 2e 06 	sts	0x062E, r1
		UART3.flag=1;
 c4c:	81 e0       	ldi	r24, 0x01	; 1
 c4e:	80 93 32 06 	sts	0x0632, r24
		UCSR3B&=~(1<<RXEN3);
 c52:	e1 e3       	ldi	r30, 0x31	; 49
 c54:	f1 e0       	ldi	r31, 0x01	; 1
 c56:	80 81       	ld	r24, Z
 c58:	8f 7e       	andi	r24, 0xEF	; 239
 c5a:	80 83       	st	Z, r24
		UCSR3B|=(1<<TXEN3);
 c5c:	80 81       	ld	r24, Z
 c5e:	88 60       	ori	r24, 0x08	; 8
 c60:	80 83       	st	Z, r24
	}
/*USART_Transmit(UDR3,0);*/
	
}
 c62:	ff 91       	pop	r31
 c64:	ef 91       	pop	r30
 c66:	9f 91       	pop	r25
 c68:	8f 91       	pop	r24
 c6a:	3f 91       	pop	r19
 c6c:	2f 91       	pop	r18
 c6e:	0f 90       	pop	r0
 c70:	0b be       	out	0x3b, r0	; 59
 c72:	0f 90       	pop	r0
 c74:	0f be       	out	0x3f, r0	; 63
 c76:	0f 90       	pop	r0
 c78:	1f 90       	pop	r1
 c7a:	18 95       	reti

00000c7c <__vector_36>:

ISR (USART1_RX_vect)
{
 c7c:	1f 92       	push	r1
 c7e:	0f 92       	push	r0
 c80:	0f b6       	in	r0, 0x3f	; 63
 c82:	0f 92       	push	r0
 c84:	0b b6       	in	r0, 0x3b	; 59
 c86:	0f 92       	push	r0
 c88:	11 24       	eor	r1, r1
 c8a:	2f 93       	push	r18
 c8c:	3f 93       	push	r19
 c8e:	8f 93       	push	r24
 c90:	9f 93       	push	r25
 c92:	ef 93       	push	r30
 c94:	ff 93       	push	r31
	UART1.buf_in[UART1.count_in]=UDR1;
 c96:	e0 91 11 04 	lds	r30, 0x0411
 c9a:	f0 91 12 04 	lds	r31, 0x0412
 c9e:	80 91 ce 00 	lds	r24, 0x00CE
 ca2:	e0 5f       	subi	r30, 0xF0	; 240
 ca4:	fc 4f       	sbci	r31, 0xFC	; 252
 ca6:	80 83       	st	Z, r24
	UART1.count_in++;
 ca8:	80 91 11 04 	lds	r24, 0x0411
 cac:	90 91 12 04 	lds	r25, 0x0412
 cb0:	01 96       	adiw	r24, 0x01	; 1
 cb2:	90 93 12 04 	sts	0x0412, r25
 cb6:	80 93 11 04 	sts	0x0411, r24
	if (UART1.count_in>S1.NUMBER_BUF_SERVO+2)
 cba:	20 91 11 04 	lds	r18, 0x0411
 cbe:	30 91 12 04 	lds	r19, 0x0412
 cc2:	80 91 2a 04 	lds	r24, 0x042A
 cc6:	90 e0       	ldi	r25, 0x00	; 0
 cc8:	02 96       	adiw	r24, 0x02	; 2
 cca:	82 17       	cp	r24, r18
 ccc:	93 07       	cpc	r25, r19
 cce:	78 f4       	brcc	.+30     	; 0xcee <__vector_36+0x72>
	{
		UART1.count_in=0;
 cd0:	10 92 12 04 	sts	0x0412, r1
 cd4:	10 92 11 04 	sts	0x0411, r1
		UART1.flag=1;
 cd8:	81 e0       	ldi	r24, 0x01	; 1
 cda:	80 93 15 04 	sts	0x0415, r24
		UCSR1B&=~(1<<RXEN1);
 cde:	e9 ec       	ldi	r30, 0xC9	; 201
 ce0:	f0 e0       	ldi	r31, 0x00	; 0
 ce2:	80 81       	ld	r24, Z
 ce4:	8f 7e       	andi	r24, 0xEF	; 239
 ce6:	80 83       	st	Z, r24
		UCSR1B|=(1<<TXEN1);
 ce8:	80 81       	ld	r24, Z
 cea:	88 60       	ori	r24, 0x08	; 8
 cec:	80 83       	st	Z, r24
	}
/*USART_Transmit(UDR1,0);*/
	
 cee:	ff 91       	pop	r31
 cf0:	ef 91       	pop	r30
 cf2:	9f 91       	pop	r25
 cf4:	8f 91       	pop	r24
 cf6:	3f 91       	pop	r19
 cf8:	2f 91       	pop	r18
 cfa:	0f 90       	pop	r0
 cfc:	0b be       	out	0x3b, r0	; 59
 cfe:	0f 90       	pop	r0
 d00:	0f be       	out	0x3f, r0	; 63
 d02:	0f 90       	pop	r0
 d04:	1f 90       	pop	r1
 d06:	18 95       	reti

00000d08 <__udivmodhi4>:
 d08:	aa 1b       	sub	r26, r26
 d0a:	bb 1b       	sub	r27, r27
 d0c:	51 e1       	ldi	r21, 0x11	; 17
 d0e:	07 c0       	rjmp	.+14     	; 0xd1e <__udivmodhi4_ep>

00000d10 <__udivmodhi4_loop>:
 d10:	aa 1f       	adc	r26, r26
 d12:	bb 1f       	adc	r27, r27
 d14:	a6 17       	cp	r26, r22
 d16:	b7 07       	cpc	r27, r23
 d18:	10 f0       	brcs	.+4      	; 0xd1e <__udivmodhi4_ep>
 d1a:	a6 1b       	sub	r26, r22
 d1c:	b7 0b       	sbc	r27, r23

00000d1e <__udivmodhi4_ep>:
 d1e:	88 1f       	adc	r24, r24
 d20:	99 1f       	adc	r25, r25
 d22:	5a 95       	dec	r21
 d24:	a9 f7       	brne	.-22     	; 0xd10 <__udivmodhi4_loop>
 d26:	80 95       	com	r24
 d28:	90 95       	com	r25
 d2a:	bc 01       	movw	r22, r24
 d2c:	cd 01       	movw	r24, r26
 d2e:	08 95       	ret

00000d30 <__divmodhi4>:
 d30:	97 fb       	bst	r25, 7
 d32:	09 2e       	mov	r0, r25
 d34:	07 26       	eor	r0, r23
 d36:	0a d0       	rcall	.+20     	; 0xd4c <__divmodhi4_neg1>
 d38:	77 fd       	sbrc	r23, 7
 d3a:	04 d0       	rcall	.+8      	; 0xd44 <__divmodhi4_neg2>
 d3c:	e5 df       	rcall	.-54     	; 0xd08 <__udivmodhi4>
 d3e:	06 d0       	rcall	.+12     	; 0xd4c <__divmodhi4_neg1>
 d40:	00 20       	and	r0, r0
 d42:	1a f4       	brpl	.+6      	; 0xd4a <__divmodhi4_exit>

00000d44 <__divmodhi4_neg2>:
 d44:	70 95       	com	r23
 d46:	61 95       	neg	r22
 d48:	7f 4f       	sbci	r23, 0xFF	; 255

00000d4a <__divmodhi4_exit>:
 d4a:	08 95       	ret

00000d4c <__divmodhi4_neg1>:
 d4c:	f6 f7       	brtc	.-4      	; 0xd4a <__divmodhi4_exit>
 d4e:	90 95       	com	r25
 d50:	81 95       	neg	r24
 d52:	9f 4f       	sbci	r25, 0xFF	; 255
 d54:	08 95       	ret

00000d56 <__udivmodsi4>:
 d56:	a1 e2       	ldi	r26, 0x21	; 33
 d58:	1a 2e       	mov	r1, r26
 d5a:	aa 1b       	sub	r26, r26
 d5c:	bb 1b       	sub	r27, r27
 d5e:	fd 01       	movw	r30, r26
 d60:	0d c0       	rjmp	.+26     	; 0xd7c <__udivmodsi4_ep>

00000d62 <__udivmodsi4_loop>:
 d62:	aa 1f       	adc	r26, r26
 d64:	bb 1f       	adc	r27, r27
 d66:	ee 1f       	adc	r30, r30
 d68:	ff 1f       	adc	r31, r31
 d6a:	a2 17       	cp	r26, r18
 d6c:	b3 07       	cpc	r27, r19
 d6e:	e4 07       	cpc	r30, r20
 d70:	f5 07       	cpc	r31, r21
 d72:	20 f0       	brcs	.+8      	; 0xd7c <__udivmodsi4_ep>
 d74:	a2 1b       	sub	r26, r18
 d76:	b3 0b       	sbc	r27, r19
 d78:	e4 0b       	sbc	r30, r20
 d7a:	f5 0b       	sbc	r31, r21

00000d7c <__udivmodsi4_ep>:
 d7c:	66 1f       	adc	r22, r22
 d7e:	77 1f       	adc	r23, r23
 d80:	88 1f       	adc	r24, r24
 d82:	99 1f       	adc	r25, r25
 d84:	1a 94       	dec	r1
 d86:	69 f7       	brne	.-38     	; 0xd62 <__udivmodsi4_loop>
 d88:	60 95       	com	r22
 d8a:	70 95       	com	r23
 d8c:	80 95       	com	r24
 d8e:	90 95       	com	r25
 d90:	9b 01       	movw	r18, r22
 d92:	ac 01       	movw	r20, r24
 d94:	bd 01       	movw	r22, r26
 d96:	cf 01       	movw	r24, r30
 d98:	08 95       	ret

00000d9a <_exit>:
 d9a:	f8 94       	cli

00000d9c <__stop_program>:
 d9c:	ff cf       	rjmp	.-2      	; 0xd9c <__stop_program>
